[{"title":"Proxy","type":0,"sectionRef":"#","url":"api/Proxy","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Proxy","url":"api/Proxy#types","content":" "},{"title":"table​","type":1,"pageTitle":"Proxy","url":"api/Proxy#table","content":"&lt;/&gt; type table = {[any]: any} Represents a table that could contain any value indexed by anything  "},{"title":"Connection​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Connection","content":"&lt;/&gt; type Connection = (CheckConnectionStatus: boolean) → boolean Represents a connection between a callback and a listener. To disconnect it, the function must be called  "},{"title":"Listeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Listeners","content":"&lt;/&gt; type Listeners = {[(...any) → (...any)]: boolean} Represents a list of callbacks that will listen to changes of the desired property, table, etc... "},{"title":"Properties​","type":1,"pageTitle":"Proxy","url":"api/Proxy#properties","content":" "},{"title":"_Proxy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#_Proxy","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Proxy._Proxy: table Table that acts as the proxy. All keys will automatically be added or indexed from this table except if rawset or rawget are used  "},{"title":"_IndexedListeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#_IndexedListeners","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Proxy._IndexedListeners: Listeners Table of functions that fire when a proxy's key is indexed  "},{"title":"_ChangedListeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#_ChangedListeners","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Proxy._ChangedListeners: Listeners Table of functions that fire when a key is added to the proxy or changed "},{"title":"Functions​","type":1,"pageTitle":"Proxy","url":"api/Proxy#functions","content":" "},{"title":"IsProxy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#IsProxy","content":"since v3.1.0 &lt;/&gt; Proxy.IsProxy(Table: table) → boolean Checks if a given table is or not a proxy (checks its metatable) local Proxy = require(Source.Proxy) local NewProxy = Proxy.new() print(Proxy.IsProxy(NewProxy)) -- Output: true print(Proxy.IsProxy({})) -- Output: false caution To check if a table is a proxy, you should call .IsProxy() using the required ModuleScript or the function will throw out an error since the created proxy class does not contain the function  "},{"title":"new​","type":1,"pageTitle":"Proxy","url":"api/Proxy#new","content":"Constructor &lt;/&gt; Proxy.new( Origin: table?,-- Optional table to use as template for the proxy table CustomProperties: {[string]: any}?-- Custom properties can be added to the proxy before constructing it ) → Proxy Creates a new proxy object  "},{"title":"OnIndex​","type":1,"pageTitle":"Proxy","url":"api/Proxy#OnIndex","content":"since v3.0.0 &lt;/&gt; Proxy:OnIndex(Callback: ( Key: string?, Value: any?, Proxy: Proxy? ) → ()) → Connection Connects passed callback to a signal that fires when a key is indexed  "},{"title":"OnChange​","type":1,"pageTitle":"Proxy","url":"api/Proxy#OnChange","content":"since v3.0.0 &lt;/&gt; Proxy:OnChange(Callback: ( Key: string?, Value: any?, OldValue: any?, Proxy: Proxy? ) → ()) → Connection Connects passed callback to a signal that fires when a key is added or changed  "},{"title":"Destroy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Destroy","content":"&lt;/&gt; Proxy:Destroy() → nil Destroys the proxy and disconnects all listeners  "},{"title":"Get​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Get","content":"since v3.0.0 &lt;/&gt; Proxy:Get(Key: string) → any Specifically looks for the desired key inside the proxy table. print(Proxy._Proxy) -- Outputs: {} print(Proxy:Get(&quot;_Proxy&quot;)) -- Outputs: nil -- Proxy._Proxy is the proxy table, since it is empty it returns an empty table -- Proxy:Get(&quot;_Proxy&quot;) is actually looking for Proxy._Proxy[&quot;_Proxy&quot;], which is nil info Use this in case the proxy object has a property that is also a key inside the proxy table  "},{"title":"Set​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Set","content":"since v3.0.0 &lt;/&gt; Proxy:Set( Key: string, Value: any ) → any-- Returns the value that was initially passed Specifically sets the value for the desired key inside the proxy table. Proxy:Set(&quot;_Proxy&quot;, 10) print(Proxy._Proxy) -- Outputs: { _Proxy = 10 } print(Proxy:Get(&quot;_Proxy&quot;)) -- Outputs: 10 -- :Set() will only modify values inside Proxy._Proxy info Use this in case the proxy object has a property that is also a key inside the proxy table "}]