[{"title":"Proxy","type":0,"sectionRef":"#","url":"api/Proxy","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Proxy","url":"api/Proxy#types","content":" "},{"title":"table​","type":1,"pageTitle":"Proxy","url":"api/Proxy#table","content":"&lt;/&gt; type table = {[any]: any} A table that could contain any value indexed by any type of value  "},{"title":"Connection​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Connection","content":"&lt;/&gt; type Connection = (CheckConnectionStatus: boolean) → boolean Connection between a signal and a listener function. To disconnect it, the connection must be called like a function with no arguments  "},{"title":"Listeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Listeners","content":"&lt;/&gt; type Listeners = {[(...any) → (...any)]: boolean} List of listener functions that will fire on signal events  "},{"title":"ProxyListeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#ProxyListeners","content":"&lt;/&gt; interface ProxyListeners { IndexListeners: Listeners ChangeListeners: Listeners } Listeners of a proxy  "},{"title":"ActiveListeners​","type":1,"pageTitle":"Proxy","url":"api/Proxy#ActiveListeners","content":"&lt;/&gt; type ActiveListeners = {[table]: ProxyListeners} List of active listeners indexed by their parent proxy "},{"title":"Properties​","type":1,"pageTitle":"Proxy","url":"api/Proxy#properties","content":" "},{"title":"_Proxy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#_Proxy","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Proxy._Proxy: table Table that acts as the proxy. All keys will automatically be added or indexed from this table except if rawset or rawget are used "},{"title":"Functions​","type":1,"pageTitle":"Proxy","url":"api/Proxy#functions","content":" "},{"title":"IsProxy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#IsProxy","content":"since v3.1.0 &lt;/&gt; Proxy.IsProxy(Table: table) → boolean Checks if the given table is or not a proxy (checks its metatable) local Proxy = require(Source.Proxy) local NewProxy = Proxy.new() print(Proxy.IsProxy(NewProxy)) -- Output: true print(Proxy.IsProxy({})) -- Output: false caution A good practice is to check  "},{"title":"new​","type":1,"pageTitle":"Proxy","url":"api/Proxy#new","content":"Constructor &lt;/&gt; Proxy.new(Origin: table?) → Proxy Creates a new proxy object  "},{"title":"OnIndex​","type":1,"pageTitle":"Proxy","url":"api/Proxy#OnIndex","content":"since v3.0.0 &lt;/&gt; Proxy:OnIndex() → () Connects passed callback to a signal that fires when a key is indexed  "},{"title":"OnChange​","type":1,"pageTitle":"Proxy","url":"api/Proxy#OnChange","content":"since v3.0.0 &lt;/&gt; Proxy:OnChange() → () Connects passed function to a signal that listens to key additions or changes  "},{"title":"Destroy​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Destroy","content":"&lt;/&gt; Proxy:Destroy() → () Destroys the proxy and disconnects all listeners  "},{"title":"Get​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Get","content":"since v3.0.0 &lt;/&gt; Proxy:Get() → () Specifically looks for the desired key inside the proxy table. print(Proxy._Proxy) -- Outputs: {} print(Proxy:Get(&quot;_Proxy&quot;)) -- Outputs: nil -- Proxy._Proxy is the proxy table, since it is empty it returns an empty table -- Proxy:Get(&quot;_Proxy&quot;) is actually looking for Proxy._Proxy[&quot;_Proxy&quot;], which is nil info Use this in case the proxy object has a property that also is a key inside the proxy table  "},{"title":"Set​","type":1,"pageTitle":"Proxy","url":"api/Proxy#Set","content":"since v3.0.0 &lt;/&gt; Proxy:Set() → () Specifically sets the value for the desired key inside the proxy table. Proxy:Set(&quot;_Proxy&quot;, 10) print(Proxy._Proxy) -- Outputs: { _Proxy = 10 } print(Proxy:Get(&quot;_Proxy&quot;)) -- Outputs: 10 -- :Set() will only modify values inside Proxy._Proxy info Use this in case the proxy object should have a key inside the proxy table that also is a proxy property "}]