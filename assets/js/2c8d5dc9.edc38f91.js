"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[295],{65133:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Proxy class.","params":[{"name":"Origin?","desc":"Optional table to convert and use as the proxy","lua_type":"table"},{"name":"InheritProxies?","desc":"Should other tables added to the proxy become a proxy with same properties?","lua_type":"boolean"},{"name":"CustomProperties?","desc":"Custom properties that can be added on creation of the proxy and its children (equivalent of using rawset)","lua_type":"table"}],"returns":[{"desc":"","lua_type":"Proxy"}],"function_type":"static","source":{"line":50,"path":"src/init.lua"}},{"name":"Destroy","desc":"Destroys the proxy and disconnects all of its connections.","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":78,"path":"src/init.lua"}},{"name":"__index","desc":"Fires `Indexed` signal when a key is indexed and returns\\nthe key\'s value","params":[{"name":"Key","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","private":true,"source":{"line":96,"path":"src/init.lua"}},{"name":"__newindex","desc":"Fires `Changed` signal when a key gets modified\\nor added to the proxy. `Changed` will only fire\\nif the value differs from its last version, even\\nthough `__newindex` fires in every change or key\\naddition","params":[{"name":"Key","desc":"","lua_type":"string"},{"name":"Value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","private":true,"source":{"line":116,"path":"src/init.lua"}}],"properties":[{"name":"Proxy","desc":"Table as a proxy. All keys added to the Proxy object are added to this table","lua_type":"table","source":{"line":25,"path":"src/init.lua"}},{"name":"Indexed","desc":"Signal fired when a proxy\'s key is indexed\\n```lua\\nlocal Value = if Proxy.Something then true else nil -- Indexed is fired, we got Something value\\n```","lua_type":"Signal","source":{"line":32,"path":"src/init.lua"}},{"name":"Changed","desc":"Signal fired when a new key is added to the proxy or when a key\'s value changes","lua_type":"Signal","source":{"line":36,"path":"src/init.lua"}},{"name":"InheritProxies","desc":"Defines if tables added to the proxy should be converted to a proxy that inherits its parent proxy properties","lua_type":"boolean","source":{"line":40,"path":"src/init.lua"}}],"types":[{"name":"table","desc":"Used to represent a table instead of typing {} since its more visual and I\'m used to it","lua_type":"{}","source":{"line":148,"path":"src/init.lua"}}],"name":"Proxy","desc":"Class designed to work as a proxy for tables. If a key is indexed, the proxy\\nwill fire an indexed signal. If a key\'s value is changed, the proxy will\\nfire a changed signal\\n```lua\\nlocal Proxy = Proxy.new()\\n\\nProxy.Changed:Connect(function(Key: string, Value: any)\\n    print(Key, Value)\\nend)\\n\\nProxy.Test = 10 -- This will print out: Test 10\\n```","source":{"line":19,"path":"src/init.lua"}}')}}]);