"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[295],{65133:function(e){e.exports=JSON.parse('{"functions":[{"name":"ListenToDisconnection","desc":"Returns a connection that must be called to disconnect a listener function","params":[],"returns":[],"function_type":"static","since":"v3.0.0","private":true,"source":{"line":49,"path":"src/init.lua"}},{"name":"FireListeners","desc":"Fires all the listeners from the specified source along with the passed arguments","params":[],"returns":[],"function_type":"static","since":"v3.0.0","private":true,"source":{"line":89,"path":"src/init.lua"}},{"name":"OnIndex","desc":"Connects passed callback to a signal that fires when a key is indexed","params":[],"returns":[],"function_type":"method","since":"v3.0.0","source":{"line":104,"path":"src/init.lua"}},{"name":"OnChange","desc":"Connects passed function to a signal that listens to key additions or changes","params":[],"returns":[],"function_type":"method","since":"v3.0.0","source":{"line":116,"path":"src/init.lua"}},{"name":"Destroy","desc":"Destroys the proxy and disconnects all listeners","params":[],"returns":[],"function_type":"method","source":{"line":127,"path":"src/init.lua"}},{"name":"Index","desc":"Fires index listeners and returns the requested key\'s value\\n\\n:::note Class members can also be indexed\\nProxy properties or methods can be returned when indexing them. To only set\\nor get actual values from the proxy table, use [Proxy:Set] and [Proxy:Get]","params":[{"name":"self","desc":"","lua_type":"Proxy"},{"name":"Key","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","since":"v3.1.3","private":true,"source":{"line":160,"path":"src/init.lua"}},{"name":"NewIndex","desc":"Fires change listeners. Change listeners will only fire if the updated value\\ndiffers from its last value\\n\\n:::tip Child proxies are automatically cleaned up\\nWhen a key\'s value is changed, if the old value is a proxy object, it will automatically\\nget cleaned up using [Proxy:Destroy]","params":[{"name":"self","desc":"","lua_type":"Proxy"},{"name":"Key","desc":"","lua_type":"string"},{"name":"Value","desc":"","lua_type":"any"}],"returns":[],"function_type":"static","since":"v3.1.3","private":true,"source":{"line":185,"path":"src/init.lua"}},{"name":"Get","desc":"Specifically looks for the desired key inside the proxy table.\\n\\n```lua\\nprint(Proxy._Proxy)        -- Outputs: {}\\nprint(Proxy:Get(\\"_Proxy\\")) -- Outputs: nil\\n\\n-- Proxy._Proxy is the proxy table, since it is empty it returns an empty table\\n-- Proxy:Get(\\"_Proxy\\") is actually looking for Proxy._Proxy[\\"_Proxy\\"], which is nil\\n```\\n\\n:::info\\nUse this in case the proxy object has a property that also is a key inside the proxy table","params":[],"returns":[],"function_type":"method","since":"v3.0.0","source":{"line":221,"path":"src/init.lua"}},{"name":"Set","desc":"Specifically sets the value for the desired key inside the proxy table.\\n\\n```lua\\nProxy:Set(\\"_Proxy\\", 10)\\n\\nprint(Proxy._Proxy)        -- Outputs: { _Proxy = 10 }\\nprint(Proxy:Get(\\"_Proxy\\")) -- Outputs: 10\\n\\n-- :Set() will only modify values inside Proxy._Proxy\\n```\\n\\n:::info\\nUse this in case the proxy object should have a key inside the proxy table that also is a proxy property","params":[],"returns":[],"function_type":"method","since":"v3.0.0","source":{"line":245,"path":"src/init.lua"}},{"name":"IsProxy","desc":"Checks if the given table is or not a proxy (checks its metatable)\\n```lua\\nlocal Proxy = require(Source.Proxy)\\n\\nlocal NewProxy = Proxy.new()\\n\\nprint(Proxy.IsProxy(NewProxy)) -- Output: true\\nprint(Proxy.IsProxy({}))       -- Output: false\\n```\\n\\n:::caution\\nA good practice is to check","params":[{"name":"Table","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","since":"v3.1.0","source":{"line":277,"path":"src/init.lua"}},{"name":"new","desc":"Creates a new proxy object","params":[{"name":"Origin","desc":"","lua_type":"table?"}],"returns":[{"desc":"","lua_type":"Proxy\\r\\n"}],"function_type":"static","tags":["Constructor"],"source":{"line":288,"path":"src/init.lua"}}],"properties":[{"name":"_Proxy","desc":"Table that acts as the proxy. All keys will automatically be added or indexed from this table except if `rawset` or `rawget` are used","lua_type":"table","readonly":true,"source":{"line":37,"path":"src/init.lua"}}],"types":[{"name":"table","desc":"A table that could contain any value indexed by any type of value","lua_type":"{[any]: any}","source":{"line":315,"path":"src/init.lua"}},{"name":"Connection","desc":"Connection between a signal and a listener function. To disconnect it, the connection must be called like a function with no arguments","lua_type":"(CheckConnectionStatus: boolean) -> boolean","source":{"line":320,"path":"src/init.lua"}},{"name":"Listeners","desc":"List of listener functions that will fire on signal events","lua_type":"{[(...any) -> (...any)]: boolean}","source":{"line":325,"path":"src/init.lua"}},{"name":"ProxyListeners","desc":"Listeners of a proxy","fields":[{"name":"IndexListeners","lua_type":"Listeners","desc":""},{"name":"ChangeListeners","lua_type":"Listeners","desc":""}],"source":{"line":335,"path":"src/init.lua"}},{"name":"ActiveListeners","desc":"List of active listeners indexed by their parent proxy","lua_type":"{[table]: ProxyListeners}","source":{"line":340,"path":"src/init.lua"}}],"name":"Proxy","desc":"Class designed to work as a proxy table. Functions can be connected to listen for\\nkey indexing or key changes/additions\\n\\n```lua\\nlocal Proxy = Proxy.new()\\n\\nProxy:OnIndex(function(Key: string, Value: any) -- Will not fire when the key changes\\n    print(\\"Indexed ->\\", Key, Value)\\nend)\\n\\nlocal Disconnect = Proxy:OnChange(function(Key: string, Value: any, OldValue: any)\\n    print(\\"Changed ->\\", Key, Value, OldValue)\\nend)\\n\\nProxy.Test = 10 -- Output: Changed -> Test 10 nil\\n\\nprint(Proxy.Test) -- 1st Output: Indexed -> Test 10\\n                  -- 2nd Output: 10\\n\\nDisconnect() -- The connection gets disconnected by just calling it, magic!\\n\\nProxy.Test = 50 -- Nothing prints out\\n```","source":{"line":30,"path":"src/init.lua"}}')}}]);